#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Seiscomp3 module which merge origins inside events.

:copyright:
    EOST (Ã‰cole et Observatoire des Sciences de la Terre)
:license:
    GNU Lesser General Public License, Version 3
    (https://www.gnu.org/copyleft/lesser.html)
"""
import os
import sys
import traceback

from seiscomp3 import Client, Config, Core, DataModel, Logging, Seismology


def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):
    return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)


class UnknownLocatorException(Exception):
    """Raised when the locator isn't available"""


class NoMergedOriginException(Exception):
    """Raised when no merged origin can't be found"""


class MergeException(Exception):
    """Raised when the merge operation can't be performed"""


class LocatorException(Exception):
    """Raised when the relocation can't be performed"""


class OriginMerger(Client.Application):
    """
    Merge several origins inside events by agency names.
    """

    # Convert an evaluation mode string to the correct enum
    ENUM_EVALUATION_MODES = {
        'manual': DataModel.MANUAL,
        'automatic': DataModel.AUTOMATIC,
    }

    # Convert an evaluation mode enum to the correct string
    STR_EVALUATION_MODES = {
        DataModel.MANUAL: 'manual',
        DataModel.AUTOMATIC: 'automatic',
    }

    def __init__(self, argc, argv):
        Client.Application.__init__(self, argc, argv)
        self.setMessagingEnabled(True)
        self.setDatabaseEnabled(True, True)
        self.setDaemonEnabled(True)
        self.setMessagingUsername('')

        self.events = []
        # Store locators used
        self.locators = {}
        # Store arrivals from station not in the inventory
        self.unknown_arrivals = []

        # Configuration variables (or arguments of the script)
        # Mode configuration
        self.mode_test = False
        # Connection configuration
        self.group_remove = None
        # Locator configuration
        self.fixed_depth = None
        self.distance_cut_off = None
        self.ignore_initial_location = False
        self.use_origin_locator = False
        self.filter_duplicate_arrival = False
        # Input configuration
        self.input_agency_ids = []
        self.input_authors = []
        self.input_evaluation_mode = None
        # Output configuration
        self.output_author = os.path.basename(__file__)
        self.output_agency_id = None
        self.output_evaluation_mode = DataModel.AUTOMATIC
        # Script parameters
        self.remove_merged_origin = False
        self.start_time = None
        self.begin_time = None
        self.event_id = None

    def init(self):
        try:
            if not Client.Application.init(self):
                return False

            self.db_query = DataModel.DatabaseQuery(self.database())

            # Configure default locator to be used
            try:
                self._init_locator(self.locator_type)
            except UnknownLocatorException:
                Logging.error('Locator %s not available -> abort'
                              % self.locator_type)
                return False

            return True
        except:
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            raise

        return False

    def initConfiguration(self):
        try:
            if not Client.Application.initConfiguration(self):
                return False

            # Mode configuration
            try:
                self.mode_test = self.configGetBool('mode.test')
            except Config.Exception:
                pass

            # Connection configuration
            try:
                self.group_remove = \
                    self.configGetString('connection.groupRemove')
            except Config.Exception:
                pass

            # Locator configuration
            try:
                self.locator_type = \
                    self.configGetString('locator.type')
            except Config.Exception:
                pass
            try:
                self.locator_profile = \
                    self.configGetString('locator.profile')
            except Config.Exception:
                pass
            try:
                self.fixed_depth = self.configGetDouble('locator.fixedDepth')
            except Config.Exception:
                pass
            try:
                self.distance_cut_off = \
                    self.configGetDouble('locator.distanceCutOff')
            except Config.Exception:
                pass
            try:
                self.ignore_initial_location = \
                    self.configGetBool('locator.ignoreInitialLocation')
            except Config.Exception:
                pass
            try:
                self.use_origin_locator = \
                    self.configGetBool('locator.useOriginLocator')
            except Config.Exception:
                pass
            try:
                self.filter_duplicate_arrival = \
                    self.configGetBool('locator.filterDuplicateArrival')
            except Config.Exception:
                pass

            # Input configuration
            try:
                self.input_agency_ids = \
                    list(self.configGetStrings('input.agencyIDs'))
            except Config.Exception:
                pass
            try:
                self.input_authors = \
                    list(self.configGetStrings('input.authors'))
            except Config.Exception:
                pass
            try:

                mode = self.configGetString('input.evaluationMode')
                self.input_evaluation_mode = \
                    OriginMerger.ENUM_EVALUATION_MODES[mode.lower()]
            except (Config.Exception, KeyError):
                pass

            # Output configuration
            try:
                self.output_author = self.configGetString('output.author')
            except Config.Exception:
                pass
            try:
                self.output_agency_id = self.configGetString('output.agencyID')
            except Config.Exception:
                pass
            try:
                str_mode = self.configGetString('output.evaluationMode')
                self.output_evaluation_mode = \
                    OriginMerger.ENUM_EVALUATION_MODES[str_mode.lower()]
            except (Config.Exception, KeyError):
                pass

            return True
        except:
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            raise

        return False

    def createCommandLineDescription(self):
        """
        Define parameters available at the command execution
        """
        self.commandline().addGroup('Mode')
        self.commandline().addOption(
            'Mode',
            'test,T',
            'test mode, do not write object in database')
        self.commandline().addOption(
            'Mode',
            'remove-merged-origin,R',
            "don't merge origin but remove merged origins")

        self.commandline().addGroup('Locator')
        self.commandline().addStringOption(
            'Locator',
            'locator-type',
            'locator to use')
        self.commandline().addStringOption(
            'Locator',
            'locator-profile',
            'locator profile')
        self.commandline().addStringOption(
            'Locator',
            'fixed-depth',
            'fix depth')
        self.commandline().addStringOption(
            'Locator',
            'distance-cut-off',
            'distance cut off')
        self.commandline().addOption(
            'Locator',
            'ignore-initial-location',
            'ignore initial location')
        self.commandline().addOption(
            'Locator',
            'use-origin-locator',
            'use the primary origin locator if possible')

        self.commandline().addGroup('Input')
        self.commandline().addStringOption(
            'Input',
            'begin',
            'specify the lower bound of the time interval '
            '(example: 2016-03-01T00:00:00.0)')
        self.commandline().addStringOption(
            'Input',
            'end',
            'specify the upper bound of the time interval '
            '(example: 2016-03-01T00:00:00.0)')
        self.commandline().addStringOption(
            'Input',
            'event,E',
            'event ID')

        self.commandline().addGroup('Output')
        self.commandline().addStringOption(
            'Output',
            'author,Au',
            'author')
        self.commandline().addStringOption(
            'Output',
            'evaluation-mode',
            'origin evaluation mode (manual or automatic)')

    def validateParameters(self):
        """
        Retrieve parameters passed at the command execution.
        """
        try:
            if Client.Application.validateParameters(self) is False:
                return False

            # Mode configuration
            self.mode_test = self.commandline().hasOption('test')
            self.remove_merged_origin = \
                self.commandline().hasOption('remove-merged-origin')

            # Locator configuration
            if self.commandline().hasOption('locator-type'):
                self.locator_type = \
                    self.commandline().optionString('locator-type')
            if self.commandline().hasOption('locator-profile'):
                self.locator_profile = \
                    self.commandline().optionString('locator-profile')
            if self.commandline().hasOption('fixed-depth'):
                fixed_depth = self.commandline().optionString('fixed-depth')
                self.fixed_depth = float(fixed_depth)
            if self.commandline().hasOption('distance-cut-off'):
                dcu = self.commandline().optionString('distance_cut_off')
                self.distance_cut_off = float(dcu)
            if self.commandline().hasOption('ignore-initial-location'):
                self.ignore_initial_location = True
            if self.commandline().hasOption('use-origin-locator'):
                self.use_origin_locator = True

            # Input configuration
            if self.commandline().hasOption('begin') \
                    and self.commandline().hasOption('end'):
                self.start_time = self.commandline().optionString('begin')
                self.end_time = self.commandline().optionString('end')
            if self.commandline().hasOption('event'):
                self.event_id = self.commandline().optionString('event')

            # Output configuration
            if self.commandline().hasOption('author'):
                self.output_author = self.commandline().optionString('author')
            if self.commandline().hasOption('evaluation-mode'):
                try:
                    str_mode = \
                        self.commandline().optionString('evaluation-mode')
                    self.output_evaluation_mode = \
                        OriginMerger.ENUM_EVALUATION_MODES[str_mode.lower()]
                except KeyError:
                    Logging.error('Wrong evaluation-mode parameter')

            return True
        except:
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            raise

        return False

    def _init_locator(self, locator_type):
        """
        Create a locator with the wanted locator type if it doesn't exist.

        If the locator isn't available, raise UnknownLocatorException.
        """
        try:
            return self.locators[locator_type.lower()]
        except KeyError:
            locator = Seismology.LocatorInterface.Create(locator_type)
            if not locator:
                raise UnknownLocatorException()

            locator.init(self.configuration())

            self.locators[self.locator_type.lower()] = locator

            return locator

    def _retrieve_merged_origin(self, origins):
        """
        Retrieve the merged origin with the agency ID and the author.
        """
        for origin in origins:
            origin = DataModel.Origin.Cast(origin)

            if not origin:
                continue

            agency_id = origin.creationInfo().agencyID()
            author = origin.creationInfo().author()

            if (agency_id == self.output_agency_id and
                    author == self.output_author):
                return origin

        raise NoMergedOriginException()

    def _retrieve_origins_to_merge(self, all_origins):
        """
        Retrieve all the origins which can be merged.
        """
        origins = {}

        for origin in all_origins:
            origin = DataModel.Origin.Cast(origin)

            if not origin:
                continue

            origin_id = origin.publicID()
            agency_id = origin.creationInfo().agencyID()
            author = origin.creationInfo().author()
            creation_time = origin.creationInfo().creationTime()
            evaluation_mode = origin.evaluationMode()

            # Check agency ID
            if (self.input_agency_ids and
                    agency_id not in self.input_agency_ids):
                Logging.debug('Origin %s not eligible, agencyID %s not allowed'
                              % (origin_id, agency_id))
                continue

            # Check author
            if (self.input_authors and author not in self.input_authors):
                Logging.debug('Origin %s not eligible, author %s not allowed'
                              % (origin_id, author))
                continue

            # Check evaluation mode
            if (self.input_evaluation_mode is not None and
                    self.input_evaluation_mode != evaluation_mode):
                try:
                    str_mode = \
                        OriginMerger.STR_EVALUATION_MODES[evaluation_mode]
                    Logging.debug('Origin %s not eligible, evaluationMode '
                                  '%s not allowed' % (origin_id, str_mode))
                except KeyError:
                    Logging.debug('Origin %s not eligible, evaluationMode is '
                                  'unknown' % origin_id)
                continue

            # Check creation time
            try:
                last_origin = origins[agency_id]
            except KeyError:
                pass
            else:
                last_creation_time = last_origin.creationInfo().creationTime()
                if creation_time.get() < last_creation_time.get():
                    Logging.debug('Origin %s not eligible, earlier than '
                                  'already qualified origin %s'
                                  % (origin_id, last_origin.publicID()))
                    continue

            origins[agency_id] = origin
            Logging.debug('Origin %s qualified with agencyID %s and author %s'
                          % (origin_id, agency_id, author))

        return origins.values()

    def _copy_arrivals(self, origin_source, origin_dest):
        """
        Copy the arrival from an origin to the other.
        """
        if self.filter_duplicate_arrival:
            # Load arrivals and picks of the origin dest and store them
            # in list. Usefull to know if an arrival is already in the
            # origin (with network/station/phase code).
            picks_dest = []
            arrivals_dest = []
            for i in xrange(origin_dest.arrivalCount()):
                arrival_dest = origin_dest.arrival(i)
                pick_dest_id = arrival_dest.pickID()
                pick_dest = self.db_query.loadObject(DataModel.Pick.TypeInfo(),
                                                     pick_dest_id)
                pick_dest = DataModel.Pick.Cast(pick_dest)
                picks_dest.append(pick_dest)
                arrivals_dest.append(arrival_dest)

        for i in xrange(origin_source.arrivalCount()):
            arrival = origin_source.arrival(i)
            new_arrival = DataModel.Arrival(arrival)

            pick_id = arrival.pickID()
            pick = self.db_query.loadObject(DataModel.Pick.TypeInfo(), pick_id)
            pick = DataModel.Pick.Cast(pick)
            network_code = pick.waveformID().networkCode()
            station_code = pick.waveformID().stationCode()

            # Check that the arrival is not already in the list
            if self.filter_duplicate_arrival:
                for pick_dest, arrival_dest in zip(picks_dest, arrivals_dest):
                    network_code_dest = pick_dest.waveformID().networkCode()
                    station_code_dest = pick_dest.waveformID().stationCode()
                    phase_code_dest = arrival_dest.phase().code()
                    if arrival.phase().code() == phase_code_dest \
                            and network_code == network_code_dest \
                            and station_code == station_code_dest:
                        # Arrival is already in the list, set a weight
                        # of 0 if the other arrival has a weight
                        if arrival_dest.weight() > 0:
                            new_arrival.setWeight(0)
                            break

            # Check that station is in inventory
            station = self.db_query.getStation(network_code, station_code,
                                               pick.time().value())
            if station is None:
                # Station is not in the inventory, arrival can't be
                # used for relocation.
                # But before check that arrival is not already in the
                # list (same pick ID).
                if all(arrival.pickID() != new_arrival.pickID() for arrival in
                       self.unknown_arrivals):
                    Logging.debug("Can't use Arrival from unknown station "
                                  "%s.%s" % (network_code, station_code))
                    self.unknown_arrivals.append(new_arrival)
            else:
                origin_dest.add(new_arrival)

    def _merge(self, event):
        """
        Get the origins which can be merged and return a new origin
        with the Arrivals of all origins.
        """
        # This DB query must be finished before we start iterating over
        # the events as otherwise we get nested queries, which are not
        # allowed.
        all_origins = [o for o in self.db_query.getOrigins(event.publicID())]

        origins = self._retrieve_origins_to_merge(all_origins)

        preferred_origin = DataModel.Origin.Find(event.preferredOriginID())
        # Put the preferred origin at the beginning of the list
        if preferred_origin in origins:
            origins.pop(origins.index(preferred_origin))
            origins.insert(0, preferred_origin)

        # Process merged origin
        try:
            merged_origin = self._retrieve_merged_origin(all_origins)

            try:
                max_creation_time = max(
                    [o.creationInfo().creationTime().get() for o in origins])
            except ValueError:
                max_creation_time = 0

            if self.remove_merged_origin:
                Logging.info('Remove merged origin %s'
                             % merged_origin.publicID())
                self._remove(event, merged_origin)
            elif (merged_origin.creationInfo().creationTime().get() <
                    max_creation_time):
                Logging.info('Some origins are newer than merged origin, '
                             'remove merged origin %s'
                             % merged_origin.publicID())
                self._remove(event, merged_origin)
            else:
                public_ids = [origin.publicID() for origin in origins]
                message = 'Origins already merged:'

                for public_id in public_ids:
                    message += '\n    - %s' % public_id

                Logging.info(message)

            raise MergeException()
        except NoMergedOriginException:
            if self.remove_merged_origin:
                raise MergeException()

        # Process origins to merge
        if len(origins) <= 1:
            raise MergeException('Not enough origins to merge')

        # Load the origins entirely
        for origin in origins:
            self.db_query.load(origin)

        # Create the new origin
        new_origin = DataModel.Origin.Create()

        self.unknown_arrivals = []

        for origin in origins:
            self._copy_arrivals(origin, new_origin)

        arrival_count = new_origin.arrivalCount() + len(self.unknown_arrivals)
        max_arrival_count = max([origin.arrivalCount() for origin in origins])
        if arrival_count == max_arrival_count:
            raise MergeException('No new arrivals')

        # Copy depth, location and earthModelID of preferred origin
        if preferred_origin in origins:
            new_origin.setDepth(preferred_origin.depth())
            new_origin.setLatitude(preferred_origin.latitude())
            new_origin.setLongitude(preferred_origin.longitude())
            new_origin.setMethodID(preferred_origin.methodID())
            new_origin.setEarthModelID(preferred_origin.earthModelID())

        message = 'Following origins merged:'
        for origin in origins:
            message += '\n    - %s' % origin.publicID()
        Logging.info(message)

        return new_origin

    def _load_picks(self, origin):
        """
        Load all picks associated to an origin (useful for the
        relocation).
        """
        picks = []
        for i in xrange(origin.arrivalCount()):
            arrival = origin.arrival(i)
            pick_id = arrival.pickID()
            pick = self.db_query.loadObject(DataModel.Pick.TypeInfo(), pick_id)
            pick = DataModel.Pick.Cast(pick)
            picks.append(pick)
        return picks

    def _load_inventory(self):
        """
        Load the inventory (useful for the relocation).
        """
        inv = DataModel.Inventory()
        self.db_query.loadNetworks(inv)
        for i in xrange(inv.networkCount()):
            self.db_query.load(inv.network(i))
        return inv

    def _get_locator_parameters(self, origin):
        """
        Get the locators with their parameters which will be used for
        the relocation.

        If the first locator can't relocate the origin, the second
        locator is used and so on.
        """
        locator = None
        parameters = []
        if self.use_origin_locator:
            try:
                locator = self._init_locator(origin.methodID().lower())
            except UnknownLocatorException:
                Logging.info('Locator %s not available' % origin.methodID())
            else:
                if self.fixed_depth is None:
                    # Locator with released depth
                    parameters.append((
                        locator,
                        origin.earthModelID(),
                        None
                    ))
                    # Locator with fixed depth
                    parameters.append((
                        locator,
                        origin.earthModelID(),
                        origin.depth().value()
                    ))
                else:
                    parameters.append((
                        locator,
                        origin.earthModelID(),
                        self.fixed_depth
                    ))

        # Try the default locator
        default_locator = self.locators[self.locator_type.lower()]
        if (default_locator is not locator or
                self.locator_profile != origin.earthModelID()):
            if self.fixed_depth is None:
                # Locator with released depth
                parameters.append((
                    default_locator,
                    self.locator_profile,
                    None
                ))
                # Locator with fixed depth
                try:
                    parameters.append((
                        default_locator,
                        self.locator_profile,
                        origin.depth().value()
                    ))
                except Core.ValueException:
                    # Depth is not set
                    pass
            else:
                parameters.append((
                    default_locator,
                    self.locator_profile,
                    self.fixed_depth
                ))

        return parameters

    def _relocate(self, origin):
        """
        Relocate the origin passed in parameter and return the new
        origin.
        """
        # Load picks and inventory for the relocation. The variables
        # aren't used but they still are useful (even if they aren't
        # passed in parameters).
        picks = self._load_picks(origin)
        inventory = self._load_inventory()

        # Prepare a list of parameters to try different locator
        # parameters. This is useful when the relocation fails.
        parameters = self._get_locator_parameters(origin)

        # Let's go! Time to relocate!
        new_origin = None
        for locator, locator_profile, depth in parameters:
            locator.setProfile(locator_profile)
            if depth is None:
                Logging.info(("Try to relocate with locator %s, profile %s "
                             "and released depth")
                             % (locator.name(), locator_profile))
                locator.releaseDepth()
            else:
                Logging.info(("Try to relocate with locator %s, profile %s "
                             "and fixed depth %s")
                             % (locator.name(), locator_profile, depth))
                locator.setFixedDepth(depth)

            try:
                new_origin = locator.relocate(origin)
                break
            except Core.GeneralException:
                # Several specific exception exists
                # (`Seismology.PickNotFoundException`,
                # `Seismology.LocatorException`,
                # `Seismology.StationNotFoundException`) but they
                # aren't used!!!
                Logging.error("Can't relocate")
                info = traceback.format_exception(*sys.exc_info())
                for i in info:
                    sys.stderr.write(i)

        if new_origin is None:
            raise LocatorException()

        # There are some modifications to do on the generated origin
        new_origin.creationInfo().setAgencyID(self.output_agency_id)
        new_origin.creationInfo().setAuthor(self.output_author)

        new_origin.setEvaluationMode(self.output_evaluation_mode)
        new_origin.setEvaluationStatus(DataModel.PRELIMINARY)

        return new_origin

    def _update_preferred_origin(self, event):
        """
        Create a Journaling notifier to update the preferred origin of
        the event.
        """
        journaling = DataModel.Journaling()
        journal_entry = DataModel.JournalEntry()
        journal_entry.setCreated(Core.Time_GMT())
        journal_entry.setSender(self.output_author)
        # No doc at all for 'EvPrefOrgAutomatic' (see
        # seiscomp3/src/trunk/apps/processing/scevent/eventtool.cpp)
        journal_entry.setAction('EvPrefOrgAutomatic')
        journal_entry.setObjectID(event.publicID())
        journaling.add(journal_entry)

    def _remove(self, event, origin):
        """
        Remove the origin from the event and update the database.
        """
        if self.mode_test:
            return

        ep = DataModel.EventParameters()
        self.db_query.loadOrigins(ep)
        self.db_query.loadOriginReferences(event)

        DataModel.Notifier.Enable()

        removed_origin_id = None
        preferred_origin_id = None
        for i in xrange(event.originReferenceCount()):
            origin_reference = event.originReference(i)
            if origin_reference.originID() == origin.publicID():
                removed_origin_id = origin.publicID()
                event.removeOriginReference(i)
            else:
                preferred_origin_id = origin_reference.originID()

        # If the preferred origin is removed, choose an other one
        if preferred_origin_id and \
                event.preferredOriginID() == removed_origin_id:
            event.setPreferredOriginID(preferred_origin_id)
            DataModel.Notifier.Create(ep, DataModel.OP_UPDATE, event)

        ep.remove(origin)

        self._update_preferred_origin(event)

        DataModel.Notifier.Disable()

        message = DataModel.Notifier.GetMessage(True)
        self.connection().send(self.group_remove, message)

    def _send(self, event, origin):
        """
        Add the origin to the event and update the database with the
        new objects.
        """
        if self.mode_test:
            return

        ep = DataModel.EventParameters()

        DataModel.Notifier.Enable()

        ep.add(origin)
        origin_reference = DataModel.OriginReference(origin.publicID())
        event.add(origin_reference)

        DataModel.Notifier.Disable()

        message = DataModel.Notifier.GetMessage(True)
        self.connection().send(message)

    def _process(self, event):
        """
        Merge origins, relocate and write to the database.
        """
        Logging.info('Processing event %s' % event.publicID())

        try:
            origin = self._merge(event)
        except MergeException as e:
            message = str(e)
            if message:
                Logging.info(message)
            Logging.info('Nothing to merge')
            return

        try:
            origin_relocated = self._relocate(origin)
        except LocatorException as e:
            message = str(e)
            if message:
                Logging.info(message)
        else:
            Logging.info('Origin %s relocated' % origin_relocated.publicID())
            self._send(event, origin_relocated)

    def handleMessage(self, message):
        self.events = []
        # Call addObject, removeObject and updateObject
        Client.Application.handleMessage(self, message)

        Logging.debug("Processed %s events" % len(self.events))
        for event in self.events:
            self._process(event)

    def _process_object(self, parentID, object_):
        try:
            event = DataModel.Event.Cast(object_)
            if not event:
                event = self.db_query.getEventByPublicID(parentID)

            if not event:
                journal_entry = DataModel.JournalEntry.Cast(object_)
                event_id = journal_entry.objectID()
                event = self.db_query.getEventByPublicID(event_id)

            if event and not any(event.publicID() == e.publicID()
                                 for e in self.events):
                self.events.append(event)
        except:
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            raise

    def addObject(self, parentID, object_):
        """
        Called when a new object is received.
        """
        self._process_object(parentID, object_)

    def removeObject(self, parentID, object_):
        """
        Called when a object is removed.
        """
        self._process_object(parentID, object_)

    def updateObject(self, parentID, object_):
        """
        Called when an updated object is received.
        """
        self._process_object(parentID, object_)

    def run(self):
        try:
            # Case when an event_id was given in argument
            if self.event_id:
                event = self.db_query.getEventByPublicID(self.event_id)
                if event:
                    self._process(event)
                else:
                    Logging.error(
                        "Can't find event with publicID %s" % self.event_id)

                return True
            # Case when dates were given in argument
            elif self.start_time and self.end_time:
                start_time = Core.Time.FromString(self.start_time, '%FT%T')
                end_time = Core.Time.FromString(self.end_time, '%FT%T')

                event_iterator = self.db_query.getEvents(start_time, end_time)
                events = [event for event in event_iterator]
                # This DB query must be finished before we start iterating over
                # the events as otherwise we get nested queries, which are not
                # allowed.
                for event in events:
                    event = DataModel.Event.Cast(event)

                    if event:
                        self._process(event)

                return True

            # Case without arguments, the application listen the EVENT
            # messaging.
            return Client.Application.run(self)
        except:
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            raise

        return False


if __name__ == "__main__":
    app = OriginMerger(len(sys.argv), sys.argv)
    app()
